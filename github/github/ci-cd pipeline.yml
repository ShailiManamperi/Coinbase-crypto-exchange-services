# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Check out the repository code
#     - name: Checkout code
#       uses: actions/checkout@v2

#     # Step 2: Set up Docker Buildx for multi-platform support
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     # Step 3: Log in to Docker Hub using GitHub secrets for credentials
#     - name: Log in to Docker Hub
#       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#     # Step 4: Loop through services to build and push Docker images
#     - name: Build and Push Docker Images
#       run: |
#         services=("crypto_price_service" "transaction_service" "account_service")
#         for service in "${services[@]}"; do
#           echo "Processing $service..."
          
#           # Build Docker image for the service
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/$service:latest ./src/$service
          
#           # Push Docker image to Docker Hub
#           docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
#         done

#     # Step 5: Clean up Docker resources after build to free space
#     - name: Clean up
#       run: |
#         docker system prune -af
name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Build Docker image
    - name: Build Docker image
      run: docker build -t myapp:latest .

    # Step 4: Log in to Docker Registry (e.g., Docker Hub)
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Step 5: Tag and push the Docker image
    - name: Tag and Push Docker image
      run: |
        docker tag myapp:latest ${{ secrets.DOCKER_USERNAME }}/myapp:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

    # Step 6: SSH into the server and deploy the application
    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d -p 80:3000 --name myapp ${{ secrets.DOCKER_USERNAME }}/myapp:latest
